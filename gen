// -*- C++ -*- random generator header

// /** @file include/gen
//  * This is an Ext C++ Library file. You should @c \#include this file
//  * in your programs, rather than any of the @a *.h implementation files.
//  * To work with this library, you should intall it into *\MinGW\lib\gcc\mingw32\9.2.0\include\c++
//  */

//
// ISO C++ 9.2.0
//

#include<unordered_map>
#include<ctime>

class gen_rand {
private:
	long long MOD;
	long long seed, step;
	std::unordered_map<long long, long long> dp;
	long long binpow (long long x, long long y) {
		if (y == 0)
			return 1LL;
		long long z = binpow(x, y>>1);
		z = z * z % MOD;
		if (y & 1)
			return z * x % MOD;
		return z;
	}
protected:
	long long f(long long x) {
		if (x < 0) {
			fprintf(stderr, "Error. Given number %lld is negative. Returned -1\n", x);
			return -1LL;
		}
		if (x == 1)
			return 0LL;
		if (!dp[x]) {
			if (x & 1)
				dp[x] = f(3 * x + 1) + 1;
			else
				dp[x] = f(x>>1LL) + 1;
		}
		return dp[x] %= MOD;
		
	}
	void set_mod(long long cur_mod) {
		if (cur_mod <= 0) {
			fprintf(stderr, "Error. Modulo %lld is negative. It is set into 1e9 + 7\n", cur_mod);
			cur_mod = 1e9 + 7;
			return;
		}
		MOD = cur_mod;
	} 
	void set_seed(long long cur_seed) {
		if (cur_seed <= 0) {
			fprintf(stderr, "Error. Seed %lld is negative. It is set into 1629431\n", cur_seed);
			cur_seed = 1629431;
			return;
		}
		seed = cur_seed;
	}
	void ReZero() {
		step = 6LL;
	}
	long long get_mod() {
		return MOD;
	}
	long long get_seed() {
		return seed;
	}
public:
	gen_rand(long long cur_seed = time(nullptr), long long cur_mod = 1e9 + 7) {
		ReZero();
		set_seed(cur_seed);
		set_mod(cur_mod);
	}
	long long random(long long l, long long r) {
		if (l < 0 || r < 0) {
			fprintf(stderr, "Error. l: %lld and r: %lld must be positive\n", l, r);
			return 0LL;
		}
		if (l >= r) {
			fprintf(stderr, "Error. Half-interval [%lld, %lld ) is empty\n", l, r);
			return 0LL;
		}
		return f(binpow(2LL, ++step * seed) - 1 + r - l) * binpow(3LL, seed) % (r - l) + l;
	}
	long long random(long long r) {
		if (r <= 0) {
			fprintf(stderr, "r: %lld must be positive\n", r);
			return 0LL;
		}
		return f(binpow(2LL, ++step * seed) - 1 + r) * binpow(3LL, seed) % r;
	} 
	long long random() {
		return f(binpow(2LL, ++step * seed) - 1 + MOD) * binpow(3LL, seed) % MOD;
	}
};